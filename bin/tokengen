#!/usr/bin/env coffee
inquirer = require 'inquirer'
async = require 'async'
jwtCfg = require('../config').jwt
jwt = require 'jsonwebtoken'

inquirer.prompt [
  {
    type: 'input'
    name: 'ns'
    message: 'Specify namespace the token belongs to'
    default: 'default'
  }
  {
    type: 'list'
    name: 'type'
    message: 'Select token type'
    choices: [
      {
        name: 'Browser token'
        value: 'browser_token'
      }
      {
        name: 'Client token'
        value: 'client_token'
      }
      {
        name: 'Base token'
        value: 'base_token'
      }
      {
        name: 'Both browser token & client token'
        value: 'both'
      }
    ]
  }
  {
    type: 'list'
    name: 'period'
    message: 'Select token valid period'
    choices: [
      {
        name: '1 day'
        value: '1 day'
      }
      {
        name: '7 days'
        value: '7 days'
      }
      {
        name: '1 month'
        value: '30 days'
      }
      {
        name: '3 months'
        value: '180 days'
      }
      {
        name: '1 year'
        value: '1 year'
      }
    ]
  }
], (answers) ->
  async.waterfall [
    (cb) ->
      if answers.type == 'client_token' or answers.type == 'both'
        payload =
          type: 'client_token'
          ns: answers.ns
        options = 
          algorithm: jwtCfg.clientToken.options.algorithm
          expiresIn: answers.period
        token = jwt.sign payload,jwtCfg.clientToken.secret, options
        console.log "Your client token is:\n#{token}"
        cb()
      else
        cb()
    (cb) ->
      if answers.type == 'browser_token' or answers.type == 'both'
        payload =
          type: 'browser_token'
          ns: answers.ns
        options = 
          algorithm: jwtCfg.browserToken.options.algorithm
          expiresIn: answers.period
        token = jwt.sign payload,jwtCfg.browserToken.secret, options
        console.log "Your browser token is:\n#{token}"
        cb()
      else
        cb()
    (cb) ->
      if answers.type == 'base_token'
        payload =
          type: 'base_token'
          ns: answers.ns
        options = 
          algorithm: jwtCfg.baseToken.options.algorithm
          expiresIn: answers.period
        token = jwt.sign payload,jwtCfg.baseToken.secret, options
        console.log "Your base token is:\n#{token}"
        cb()
      else
        cb()          
  ], (err) ->
    'done'
